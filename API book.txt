1.8 Шаблоны проектирования API
Мы говорили о методах HTTP в предыдущем разделе. Вы можете использовать 9 HTTP
методы и комбинировать их разными способами и создавать системы, которые либо слишком
сложны в управлении или сложны в использовании.
Для решения этой проблемы инженеры на протяжении многих лет разработали несколько
архитектурные шаблоны и лучшие практики, такие как
1.8.1 RESTful API
RESTful или REST API — наиболее распространенный архитектурный шаблон, используемый сегодня.
Название происходит от докторской диссертации Роя Филдинга в 2000 году, в которой
введен термин «репрезентационная государственная передача». Он использует подмножество HTTP
определить 6 руководящих принципов ограничения, которые ограничивают способ, которым сервер может обрабатывать и
реагировать на запросы клиента. API, соответствующие этим рекомендациям, называются «
RESTful API».
API-интерфейсы RESTful обычно создаются для использования только 4 методами HTTP, GET, POST.
, PUT и DELETE и является преобладающим архитектурным стилем для создания
веб-сайты и веб-API.
GET: Используется для выбора или получения данных с сервера. Может использоваться и для тех же ограниченных данных.
POST: используется для отправки или записи данных на сервер. Обычно используется для отправки конфиденциальной информации, такой как
как учетные данные, финансовые данные или большие наборы данных, такие как файлы
PUT : используется для обновления данных, которые уже присутствуют на сервере, например. обновление записей базы данных,
замена файлов и т.д.
УДАЛИТЬ: используется для удаления существующих данных с сервера.
API-интерфейсы RESTful также не имеют состояния, что означает, что они ничего не помнят о
ваше предыдущее взаимодействие. Они ведут себя как кто-то, кто должен вам денег и
делать вид, что ничего не помнит о предыдущих разговорах.
Кроме шуток, это означает, что при взаимодействии с RESTful API клиент
(вы) несете ответственность за владение и предоставление любых исторических данных или контекста, если
нужный.
Например, предположим, что вы входите на веб-сайт Google, используя его API oAuth2, который
предположительно RESTful, тогда, если вы откроете Gmail, вам не нужно входить в систему
снова, но Google не помнит, что вы уже вошли в систему. Вместо этого,
Google устанавливает в вашей системе файл cookie, который включает «токен» (технический термин
Веб-токены JavaScript или JWT). Когда вы заходите в Gmail , Gmail запрашивает ваш
браузер, если у него уже есть токен, если да, то он позволяет вам пройти, если нет, вы вынуждены
войти снова.
Это хорошая вещь? Как правило, но это зависит. Stateful-API имеют свое место и
вариантов использования, но на сегодняшнем массовом пользовательском рынке преимущество API без сохранения состояния заключается в том, что
потому что ответственность за запоминание данных сеанса лежит на клиенте или
Браузер упрощает масштабирование.
В основном мы сосредоточимся на шаблонах REST API в API, которые мы создадим в этой книге.

1.8.2 API-интерфейсы GraphQL
Первоначально разработан Facebook, но в конечном итоге выпущен как Open Source.
проект. GraphQL позволяет запрашивающей стороне определить структуру данных, которая
требуется. С тех пор GraphQL рекламируется как убийца REST, но, как и все другие
таких «убийц» он не смог заменить REST.
REST API довольно негибкие, когда дело доходит до обработки
изменение требований со стороны клиентов, которые получают к ним доступ. GraphQL это
разработан для решения этой проблемы, позволяя пользователям настраивать свой запрос и выбор
данные, которые они хотят получить взамен.
Демонстрация CoinDesk была примером REST API, однако, если CoinDesk
позволяло пользователю точно определить необходимые ему данные, дату, с которой
нужны цены и валюта, дизайн REST API оказался бы
очень сложный. Однако использование GraphQL в этих сценариях намного проще.
создавать API, а также использовать их.
1.8.3 API-интерфейсы CRUD
Обычно используется для создания API для базы данных и соответствует стандартам REST.
CRUD означает СОЗДАТЬ, ПРОЧИТАТЬ, ОБНОВИТЬ, УДАЛИТЬ. Это действия
которые могут быть выполнены любой базой данных, и если вы создадите REST API, который
обрабатывает операции с БД, вы фактически создали CRUD API. Следовательно, часто
REST и CRUD взаимозаменяемы, когда речь идет об API, которые
с БД.
1.8.4 API-интерфейсы SOAP
Простой протокол доступа к объектам или SOAP — одна из первых спецификаций API.
и использовался для определения спецификации протокола обмена сообщениями для обмена данными.
между двумя системами.
У SOAP есть свои варианты использования и преимущества, но никто не использует его для разработки веб-API.
Настоящее время. Ну, никто, кто в здравом уме и не застрял с наследием
системы, построенные на SOAP.
Устаревание API-интерфейсов SOAP связано не с их недостатками, а с
предпочтения разработчика, где REST с его связью на основе JSON был
легче реализовать и взаимодействовать.

Глава 2: Python и работа с API
Взаимодействие с API с помощью cURL и других утилит доставляет удовольствие, но при создании
приложений и большинства других вариантов использования они слишком громоздки.
В таких случаях современные языки программирования, такие как Python, Go, Rust, C#,
Рубин и т.д. используются.
И прежде чем я получу хоть какую-то ненависть, скажу, что есть разработчики, которые могут создавать полноценные утилиты, используя
PowerShell или Bash, слава им, но мы, простые смертные, должны придерживаться смертных
языки.
2.1 Программный доступ к API
В предыдущей главе мы использовали утилиту командной строки cURL для получения ответов API.
Теперь давайте попробуем сделать это с помощью Python. Мы собираемся использовать Jupyter Notebook для выполнения
что внутри программы.
Откройте блокнот Jupyter (или Google Colab) и создайте новый блокнот.
Запустите следующее в блокноте Jupyter

import json
mport requests
URL = "https://api.coindesk.com/v1/bpi/currentprice.json"
response = requests.get(URL)
data = json.loads(response.content.decode( "utf-8" ))
print(data)

Этот фрагмент делает следующее

Импортирует запросы Python
Сохраняет URL-адрес конечной точки в строковой переменной с именем «URL».
Отправляет запрос GET на URL
извлечь ответ в формате JSON
А затем распечатывает данные ответа, как показано ниже.

Глава 3: Создание API с помощью Flask
Flask — это микро-веб-фреймворк, написанный на Python. Это называется микрофреймворк.
потому что в самом фреймворке нет никаких излишеств и нет никаких функций
в комплекте.
Более продвинутые веб-фреймворки, такие как Django, имеют почти все необходимое для
создать полностью функционирующий веб-сайт, такой как обработка БД, пользователь и сеанс
управление и т. д.
С другой стороны, Flask не имеет почти ничего, кроме поддержки расширений, которые могут быть
используется для внесения этих функций. Многие предпочитают микрофреймворки, потому что
он легкий, но все же расширяемый, чтобы добавить любую функцию с готовыми к использованию плагинами.
В последующих главах мы будем использовать Flask и его плагин для создания простого API.
который ответит "Привет, мир!"
3.1 Инициализация среды разработки
Для начала нам нужно инициализировать нашу среду разработки. Пожалуйста
следуйте приведенной ниже инструкции шаг за шагом
3.1.1 Создайте форк репозитория GitHub для стартового набора
Это создаст копию репозитория в вашей собственной учетной записи GitHub, которую вы
может обновить.